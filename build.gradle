plugins {
    id "org.owasp.dependencycheck" version "7.1.0.1"
    id 'java'
    id 'application'
    id 'eclipse'
    id 'pmd'
    id 'checkstyle'
    id 'com.github.spotbugs' version '4.7.1'
}

apply from: 'config/gradle/versioning.gradle'

mainClassName = "org.terasology.web.JettyMain"
applicationName = "meta-server"

group = 'org.terasology.web'

targetCompatibility = '11'
sourceCompatibility = '11'

repositories {
    mavenCentral()

    maven {
        name "Terasology Artifactory"
        url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
        allowInsecureProtocol true
    }
}

ext {
    jettyVersion = '9.4.48.v20220622'
}

def codeMetricsDir = "${buildDir}/codeMetrics"

configurations {
    codeMetrics
}

dependencies {
    implementation group: 'org.eclipse.jetty', name: 'jetty-servlet', version: jettyVersion
    implementation group: 'org.eclipse.jetty', name: 'jetty-servlets', version: jettyVersion
    implementation 'javax.servlet:javax.servlet-api:3.1.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.google.code.findbugs:jsr305:3.0.0'

    implementation 'com.sun.xml.bind:jaxb-impl:2.3.3'
    implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1.1'

    implementation 'org.glassfish.jersey.containers:jersey-container-jetty-servlet:2.25'
    implementation 'org.glassfish.jersey.ext:jersey-mvc-freemarker:2.25'

    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'com.google.guava:guava:31.1-jre'

    implementation 'org.jooq:jooq:3.14.16'
    implementation 'org.postgresql:postgresql:42.4.1'

    implementation 'com.squareup.retrofit:retrofit:1.9.0'

    implementation 'com.zaxxer:HikariCP:5.0.1'

    implementation 'org.terasology:gestalt-module:4.1.2'

    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    testImplementation 'org.jsoup:jsoup:1.15.2'
    testImplementation 'com.jcabi:jcabi-w3c:1.4.0'
    testImplementation 'com.jcabi:jcabi-matchers:1.5.3'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.h2database:h2:1.4.190'


    pmd 'net.sourceforge.pmd:pmd-core:6.48.0'
    pmd 'net.sourceforge.pmd:pmd-java:6.48.0'

    codeMetrics group: 'org.terasology.config', name: 'codemetrics', version: '1.3.2', ext: 'zip'
}

task unpackConfig(type: Sync, dependsOn: configurations.codeMetrics) {
    from zipTree(configurations.codeMetrics.singleFile)
    into codeMetricsDir

}
tasks.compileJava.dependsOn unpackConfig

checkstyle {
    ignoreFailures = true
    config = resources.text.fromFile("${codeMetricsDir}/checkstyle/checkstyle.xml")
    configProperties.samedir = "${codeMetricsDir}/checkstyle"
}

pmd {
    ignoreFailures = true
    ruleSetConfig = resources.text.fromFile("${codeMetricsDir}/pmd/pmd.xml")
    ruleSets = []
}

spotbugs {
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    excludeFilter = resources.text.fromFile("${codeMetricsDir}/findbugs/findbugs-exclude.xml").asFile()
}

test {
    // ignoreFailures: Specifies whether the build should break when the verifications performed by this task fail.
    ignoreFailures = true

    // showStandardStreams: makes the standard streams (err and out) visible at console when running tests
    testLogging.showStandardStreams = true
}

distributions {
    main {
        contents {
            from('.') {
                include 'templates/'
                include 'web/'
            }
        }
    }
}

task stage(dependsOn: ['clean', 'installDist'])
