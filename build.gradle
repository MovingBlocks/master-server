plugins {
    id "org.owasp.dependencycheck" version "5.0.0-M3.1"
    id 'java'
    id 'application'
    id 'eclipse'
    id 'pmd'
    id 'checkstyle'
    id 'com.github.spotbugs' version '4.5.0'

    id "com.diffplug.eclipse.apt" version "3.22.0"
    id "com.github.johnrengelman.shadow" version "6.0.0"
}

apply from: 'config/gradle/versioning.gradle'

mainClassName = "org.terasology.Application"
applicationName = "meta-server"

group = 'org.terasology.web'

repositories {
    mavenCentral()
    jcenter()

    maven {
        name "Terasology Artifactory"
        url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
        allowInsecureProtocol true
    }
}

ext {
    jettyVersion = '9.4.6.v20170531'
}

java {
    sourceCompatibility = JavaVersion.toVersion('11')
    targetCompatibility = JavaVersion.toVersion('11')
}

def codeMetricsDir = "${buildDir}/codeMetrics"

configurations {
    codeMetrics
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    /* Micronauts start*/
    annotationProcessor(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut:micronaut-validation")
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut.views:micronaut-views-freemarker")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-jooq")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")
    testAnnotationProcessor(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testAnnotationProcessor("io.micronaut:micronaut-inject-java")
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

//    testImplementation(platform("org.testcontainers:testcontainers-bom:1.14.3"))
//    testRuntimeOnly("org.testcontainers:postgresql")
    /* Micronauts end*/

    implementation group: 'org.eclipse.jetty', name: 'jetty-servlet', version: jettyVersion
    implementation group: 'org.eclipse.jetty', name: 'jetty-servlets', version: jettyVersion
    implementation 'javax.servlet:javax.servlet-api:3.1.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.google.code.findbugs:jsr305:3.0.0'

    implementation 'org.glassfish.jersey.containers:jersey-container-jetty-servlet:2.22.1'

    implementation 'com.google.code.gson:gson:2.4'
    implementation 'com.google.guava:guava:18.0'

    implementation 'org.jooq:jooq:3.7.0'
    implementation 'org.postgresql:postgresql:9.4-1205-jdbc42'

    implementation 'com.squareup.retrofit:retrofit:1.9.0'

    implementation 'org.slf4j:slf4j-api:1.7.30'

    implementation 'com.zaxxer:HikariCP:2.4.1'

    implementation 'org.terasology:gestalt-module:4.1.2'

    testImplementation 'org.jsoup:jsoup:1.8.3'
    testImplementation 'com.jcabi:jcabi-w3c:1.3'
    testImplementation 'com.jcabi:jcabi-matchers:1.4'
    testImplementation 'junit:junit:4.12'
    testImplementation("com.h2database:h2")
    testImplementation 'org.slf4j:slf4j-api:1.7.30'

    runtimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.3'

    pmd 'net.sourceforge.pmd:pmd-core:6.27.0'
    pmd 'net.sourceforge.pmd:pmd-java:6.27.0'

    codeMetrics group: 'org.terasology.config', name: 'codemetrics', version: '1.3.2', ext: 'zip'
}

test.classpath += configurations.developmentOnly

task unpackConfig(type: Sync, dependsOn: configurations.codeMetrics) {
    from zipTree(configurations.codeMetrics.singleFile)
    into codeMetricsDir

}
tasks.compileJava.dependsOn unpackConfig

checkstyle {
    ignoreFailures = true
    config = resources.text.fromFile("${codeMetricsDir}/checkstyle/checkstyle.xml")
    configProperties.samedir = "${codeMetricsDir}/checkstyle"
}

pmd {
    ignoreFailures = true
    ruleSetConfig = resources.text.fromFile("${codeMetricsDir}/pmd/pmd.xml")
    ruleSets = []
}

spotbugs {
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    excludeFilter = resources.text.fromFile("${codeMetricsDir}/findbugs/findbugs-exclude.xml").asFile()
}


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
            '-parameters',
            // enables incremental compilation
            '-Amicronaut.processing.incremental=true',
            '-Amicronaut.processing.annotations=org.terasology.*',
            "-Amicronaut.processing.group=$project.group",
            "-Amicronaut.processing.module=$project.name",
    ])
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
                'micronaut.io.watch.restart':'true',
                'micronaut.io.watch.enabled':'true',
                "micronaut.io.watch.paths":"src/main"
        )
    }
}


test {
    useJUnitPlatform()
    // ignoreFailures: Specifies whether the build should break when the verifications performed by this task fail.
    ignoreFailures = true

    // showStandardStreams: makes the standard streams (err and out) visible at console when running tests
    testLogging.showStandardStreams = true
}

distributions {
    main {
        contents {
            from('.') {
                include 'templates/'
                include 'web/'
            }
        }
    }
}

task stage(dependsOn: ['clean', 'installDist'])
