
plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.7.10"
    id("org.sonarqube") version "4.4.1.3373"

    id 'com.google.cloud.tools.jib' version '3.4.0'
}

apply from: 'config/gradle/versioning.gradle'

mainClassName = "org.terasology.Application"
applicationName = "meta-server"
group = 'org.terasology.web'

ext {
    //imagePath = "gcr.io/${gcpProjectName}/${applicationName}:${version}"                                  // GCR
    //imagePath = "docker.terasology.io/repository/docker-nexus/${applicationName}:${version}"              // Nexus
    imagePath = "us-east1-docker.pkg.dev/${gcpProjectName}/test-docker/${applicationName}:${version}"       // GAR
}

repositories {
    mavenCentral()

    maven {
        name "Terasology Artifactory"
        url "https://artifactory.terasology.io/artifactory/virtual-repo-live"
    }
}

java {
    sourceCompatibility = JavaVersion.toVersion('11')
    targetCompatibility = JavaVersion.toVersion('11')
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    implementation("io.micronaut:micronaut-http-client")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("io.micronaut:micronaut-inject:3.10.1")
    implementation("io.micronaut.views:micronaut-views-freemarker")

    // logging
    testImplementation 'org.slf4j:slf4j-api:1.7.30'
    runtimeOnly("ch.qos.logback:logback-classic")

    // Database
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-jooq")
    implementation 'com.h2database:h2'
    runtimeOnly("org.postgresql:postgresql")

    // For `@ThreadSafe`
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.google.code.findbugs:jsr305:3.0.0'

    // Module working
    implementation 'com.google.code.gson:gson:2.4'
    implementation 'org.terasology:gestalt-module:4.1.2'
    implementation 'com.google.guava:guava:18.0'
}

application {
    mainClass.set("org.terasology.Application")
}

shadowJar {
    mergeServiceFiles()
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("org.terasology.*")
    }
}

task runDocker(type: Exec) {
    dependsOn 'jibDockerBuild'

    // GCP variant that'll use an image published (and public) on the Google Container Registry
    //commandLine 'docker', 'run', '--env', 'MICRONAUT_ENVIRONMENTS=dev', '-p', '8080:8080', "gcr.io/$gcpProjectName/$applicationName:$version"

    // Local variant
    commandLine 'docker', 'run', '--env', 'MICRONAUT_ENVIRONMENTS=dev', '-p', '8080:8080', "$applicationName:$version"
}

// If needed - can adjust the origin image and set a target location for automated publishing
jib {
    //from.image = 'adoptopenjdk:11-jre-hotspot'

    // This needs auth via `gcloud auth configure-docker` locally or something else in CI. Hardcoded GCP project name.
    //to.image = "$imagePath"
    // `./gradlew jib` will then both build and publish the image

    // Alternatives with auth
    to {
        image = "$imagePath"

        // GAR auth - assumes the service account key is in a secret file credential from Jenkins
        auth {
            username = "_json_key"
            password = project.provider({ -> // This Gradle file may be executed in a context where Jenkins credentials are not available yet
                def garKeyFile = System.getenv("GOOGLE_APPLICATION_CREDENTIALS")
                if (garKeyFile == null) {
                    logger.warn("Warning: GOOGLE_APPLICATION_CREDENTIALS env var is not set. Skipping Jib authentication.")
                    return ""
                }

                def keyFile = new File(garKeyFile as String)
                if (!keyFile.exists()) {
                    logger.warn("Warning: Service account key file does not exist: ${keyFile.absolutePath}. Skipping Jib authentication.")
                    return ""
                }

                return keyFile.text
            })
        }

        /* Nexus way
        auth {
            username = System.getenv('NEXUS_USERNAME') ?: 'unset'
            password = System.getenv('NEXUS_PASSWORD') ?: 'unset'
        }
        */
    }
    // Interesting part could be templates with _dynamic_ pick of container registry
}

// Does text manipulation to prepare k8s YAML files for deployment - should happen in a CD style context with no Git updates
task prepareCD(type: Exec) {
    //NOTE: On MacOS you need -i '' 's| ... specifically, may have to remove the '' for Linux
    commandLine 'bash', '-c', """
        sed -i 's|APP_URL|${appUrl}|g' k8s/ingress.yaml &&
        sed -i 's|IMAGE_PATH|${imagePath}|g' k8s/statefulset.yaml
    """
}

sonar {
    properties {
        property "sonar.projectKey", "com.example.${applicationName}"
        property "sonar.host.url", "https://sonarqube.terasology.io/"
        property "sonar.token", System.getenv('SONAR_TOKEN')
    }
}

distributions {
    main {
        contents {
            from('.') {
                include 'templates/'
                include 'web/'
            }
        }
    }
}

task stage(dependsOn: ['clean', 'installDist'])
